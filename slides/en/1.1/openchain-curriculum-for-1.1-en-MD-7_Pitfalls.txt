** CHAPTER 7
Avoiding Compliance Pitfalls

# --------------------

** Compliance Pitfalls

- This chapter will describe some potential pitfalls to avoid in the compliance
  process:
  - Intellectual Property (IP) pitfalls
  - License Compliance pitfalls
  - Compliance Process pitfalls

# --------------------

** Intellectual Property Pitfalls

- Type & Description

  Unplanned inclusion of copyleft FOSS into proprietary or 3rd party code: 

  This type of failure occurs during the development process when engineers
  add FOSS code into source code that is intended to be proprietary in
  conflict with the FOSS policy.

- Discovery

  This type of failure can be discovered by scanning or auditing
  the source code for possible matches with:
  - FOSS source code 
  - Copyright notices
  Automated source code scanning tools may be used for this purpose

- Avoidance

  This type of failure can be  avoided by: 
  - Offering training to engineering staff about compliance issues,
    the different types of FOSS licenses and the implications of
    including FOSS in proprietary source code 
  - Conducting regular source code scans or audits for all the
    source code in the build environment. 

# --------------------

** Intellectual Property Pitfalls

- Type & Description

  Unplanned linking of copyleft FOSS and proprietary source code: 

  This type of failure occurs as a result of linking software with
  conflicting or incompatible licenses. The legal effect of linking
  is subject to debate in the FOSS community.

- Discovery

  This type of failure can be discovered using a
  dependency tracking tool that shows any linking between
  different software components.

- Avoidance

  This type of failure can be avoided by:
  - Offering training to engineering staff to avoid linking software
    components with licenses that conflict with you FOSS policies
    which will take a position on these legal risks
  - Continuously running the dependency tracking tool over
    your build environment

- Type & Description

  Inclusion of proprietary code into copyleft FOSS through 
  source code modifications 

- Discovery

  This type of failure can be discovered using the audits or scans
  to identify and analyze the source code you introduced to the FOSS
  component.

- Avoidance

  This type of failures can be avoided by:
  - Offering training to engineering staff
  - Conducting regular code audits

# --------------------

** License Compliance Pitfalls

- Type & Description

  Failure to Provide Accompanying Source Code/appropriate license,
  attribution or notice information

- Avoidance

  This type of failure can be avoided by making source code capture and
  publishing a checklist item in the product release cycle before the
  product becomes available in the market place.

- Type & Description

  Providing the Incorrect Version of Accompanying Source Code

- Avoidance

  This type of failure can be avoided by adding a verification 
  step into the compliance process to ensure that the accompanying
  source code for the binary version is being published.

- Type & Description

  Failure to Provide Accompanying Source Code for FOSS Component
  Modifications

- Avoidance

  This type of failure can be avoided by adding a verification 
  step into the compliance process to ensure that source code for
  modifications are published, rather than only the original source code
  for the FOSS component

# --------------------

** License Compliance Pitfalls

- Type & Description

  Failure to mark FOSS Source Code 
  Modifications:

  Failure to mark FOSS source code that has been changed 
  as required by the FOSS license (or providing information about
  modifications which has an insufficient level of detail or clarity
  to satisfy the license)

- Avoidance

  This type of failure can be avoided by:
  - Adding source code modification marking as a verification step
    before releasing the source code 
  - Offering training to engineering staff to ensure they update
    copyright markings or license information of all FOSS or
    proprietary software that is going to be released to the public

# --------------------

** Compliance Process Failures

- Description

  Failure by developers to seek approval to use FOSS

- Avoidance

  This type of failure can be avoided by offering training to 
  Engineering staff on the company’s FOSS policies and 
  processes.
  
- Prevention

  This type of failure can be prevented by:
  - Conducting periodic full scan for the software platform to detect
    any “undeclared” FOSS usage
  - Offering training to engineering staff on the company's FOSS
    policies and processes
  - Including compliance in the employees performance review

- Description

  Failure to take the FOSS training

- Avoidance

  This type of failure can be avoided by ensuring that the 
  completion of the FOSS training is part of the employee’s
  professional development plan and it is monitored for completion
  as part of the performance review 

- Prevention

  This type of failure can be prevented by mandating
  engineering staff to take the FOSS training by a specific date 

# --------------------

** Compliance Process Failures

- Description

  Failure to audit the source code

- Avoidance

  This type of failure can be avoided by:
  - Conducting periodic source code scans/audits 
  - Ensuring that auditing is a milestone in the iterative
    development process 

- Prevention

  This type of failure can be prevented by:
  - Providing proper staffing as to not fall behind in schedule
  - Enforcing periodic audits 

- Description

  Failure to resolve the audit findings
  (analyzing the "hits" reported
  by a scan tool or audit)

- Avoidance

  This type of failure can be avoided by 
  not allowing a compliance ticket to be
  resolved (i.e. closed) if the audit report 
  is not finalized. 

- Prevention

  This type of failure can be prevented by implementing blocks
  in approvals in the FOSS compliance process

- Description

  Failure to seek review of FOSS in a timely manner

- Avoidance

  This type of failure can be avoided by initiating FOSS Review requests early
  even if engineering did not yet decide on the adoption of the FOSS
  source code

- Prevention

  This type of failure can be prevented through education

# --------------------

** Ensure Compliance Prior to Product Shipment

- Companies must make compliance a priority before any product (in
  whatever form) ships

- Prioritizing compliance promotes:
  - More effective use of FOSS within your organization
  - Better relations with the FOSS community and FOSS organizations

# --------------------

** Establishing Community Relationships

As a company that uses FOSS in a commercial product, it is best to
create and maintain a good relationship with the FOSS community -
in particular, with the specific communities related to the FOSS
projects you use and deploy in your commercial products. 

In addition, good relationships with FOSS organizations can be very
helpful in advising on best way to be compliant and also help out if you
experience a compliance issue.

Good relationships with the software communities may also be helpful for
two-way communication: upstreaming improvements and getting support
from the software developers.

# --------------------

** Check Your Understanding

- What types of pitfalls can occur in FOSS compliance? 

- Give an example of an intellectual property failure.

- Give an example of a license compliance failure.

- Give an example of a compliance process failure.

- What are the benefits of prioritizing compliance?

- What are the benefits of maintaining a good community
  relationship?

# --------------------

